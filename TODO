Thu Dec 18 10:58:40 EST 2014


===== rogomatic


building:

 - should compile and link

 - i have a report for Lubuntu 14.0.1 32 Bit as able to 
   compile and run.  thank you for the report!

 - also have a report of rogomatic not working on a 64 bit 
   system, but details are still unknown.


code changes/fixes summary:

 - see the file ChangeLog.


strange happenings and known bugs:

 - there are no crashes or segfaults that i can
   find (for the moment) in rogomatic and i haven't
   broken rogue in several months.

 - scrmap[][] is not reset between levels other
   than by unsetting STUFF.  this may be a cause
   for other obscure searching related bugs or ?
   i'm hoping to test this out for 2.0.2 or soon
   after.

 - doesn't find some passageways when searching
   and that ends up wasting a lot of time or 
   causing starvation.  some searches find a new
   square but it looks like the player doesn't
   notice it (not made a new goal to explore?...
   dunno why).  SEED=3 is a good current example
   where the search fails for a long time and
   then the player is killed shortly before 
   starving.

 - the scroll related error that used to show up
   is back, but i've worked around it for now by
   using a slightly modified vt100 terminfo.  see
   NEWS for details on the workaround if you want
   to use it.  figure this out in detail (very low
   priority as long as the work around keeps working
   and doesn't introduce new bugs/issues).

 - i've seen the search count go negative at times
   and have yet to look into why.

 - slist is not big enough if the hero dies in a
   room with a lot of things in it, because when
   the tombstone is shown on the screen much of it
   is interpreted as items.  a very rare event yet
   an easy fix for this is to increase slist size.

 - i've greatly increased the number in command.c
   (MAXSAMECOM) so that the player will starve to
   death instead of causing an error to be written
   to the /var/games/rogomatic/error5.4.4 file:


   this is intentional!


                         the goal is to get the 
   player to win or die in all cases it is 
   presented with so that the learning/genetic
   portions of the code and the long term memory
   files will build up enough information to make
   better decisions.  i am not sure if that is
   actually happening yet because i rarely get 
   beyond a few thousand test runs before i work 
   on something else (which changes the random 
   number generation and that impacts the entire 
   learning/history).  in some cases i've noticed
   changes starting to appear in decisions after 
   750 runs.  that's a tremendous number of 
   decisions each affected by the previous one
   all the way back to the first random number
   generated based upon whichever SEED is being
   used to start from.

   the only way i know i've made a difference over
   the longer haul is to compare several thousand
   cases of each version of the program and see how
   far they get and what kinds of issues are 
   noticeable.  right now the starvation and searching
   and not finding seem to be the next major bit of 
   research to dig into, but first it is more likely
   that i will ---\
                  |
                  |
                  |
                 \ /
                  .
                  .

  - look into weapon handling again.  i really dislike
    how it is currently happening and have been trying
    some different approaches...


completely new areas of coding:

 - some scrolls, potions, wands/staffs, rings,
   etc are not used or any information they might
   provide is looking like it is ignored.

 - goals could be stacked and popped or 
   interrupted and subgoals established.

 - searching looks like it completely misses
   some rooms or areas and perhaps another 
   method could be used after the others have
   failed.

 - making more genes and incorporating them into
   the player.

 - detecting cycles of commands so that searching
   can be more efficient (tradeoff likely).


wishlist items and help me out things:

 - do the same sort of thing for armor
   handling that i did for weapon handling
   (actually, this is now in question as i
   keep finding things that aren't quite
   right with weapon handling).

 - fix configure/automake stuff to work with
   ncurses debugging includes and libraries
   - go through and make sure what is there is
     correct and useful (get rid of old stuff
     which may no longer apply).

 - find a better home for this code than my
   machine.  must be free and useable by me.

 - get 64 bit issue sorted out.

 - some of the code has been commented out
   dealing with signals, i don't think i'll
   look at it anytime soon, but if you can
   sort it out that would be great.

 - some of the other programs i've actually
   never tried or know what they do.

 - are the docs generated going to the right
   place in the man pages?  are they still
   accurated?

 - license verification and documenting it.

 - see next section (ask me if i'm working on
   something before putting time into it as
   i'd rather you work on something i'm not...)


screen not updating correctly:

  the internal representation of the screen is correct
so these are what seems to be cosmetic flaws.

 - leftover '.', '@' and other characters in dark rooms

 - passages are sometimes blank instead of '#'

 - monster letters don't get removed

 - #'s get put to the left of where they belong


rogue and rog-o-matic other versions (someday maybe):

 - test against different versions of rogue 
   other than my 5.4.4. altered version.

   - yes, finally did some of this and it looks like
     making changes for the bsdgames-nonfree version of
     rogue would be too large.  i'm going to skip this, 
     i'd rather work on other things.

   - the rogue fork versions at coredumpcentral.org seem
     to actually work somewhat, but i don't think any of
     them get very far...  i'll skip this too.  some day
     perhaps i'll get back to it.


bug reports, fixes, questions:

  ant at anthive dot com


